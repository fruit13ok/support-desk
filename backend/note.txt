-frequently used commands, and action 
  npm start
  npm run server
  ctrl-c
  when edited .env file restart server ctrl-c, npm run server

////////////////////////////////////////////////////////////////////////////////////////////////////////


-setup mongodb, express server file stucture, github repo

-Go to mongodb.com
  -one of my account
    fruit13ok@gmail.com 
    yliu192@@
	-Don’t login
	Download install “mongoldb compass”
	-login
	view all organization
	create new organization
	name “reviewMERN”, with mongodb atlas
	-new project
	name “reviewMERN”
	-create a database
	choose “FREE”
		AWS, Oregon (us-west-2), cluster name “reviewMERNCluster”
	-Security Quickstart
	username and password
		fruit13ok
		ly13OK
			create user
	where would you like to connect form?
		add my current IP address
			Finish and Close
	-go to database
		it take a minute for the cluster to create
		Browse collection
			add my own data
				database name “supportdeskdb”
				collection name ‘users“
		-go to Overview
			click “connect”
			choose “connect using MongoDB Compass”
			copy the connection string to MongoDB Compass
			mongodb+srv://fruit13ok:<password>@reviewmerncluster.3i1sjcv.mongodb.net/test
			change <password> and remove "test"
			mongodb+srv://fruit13ok:ly13OK@reviewmerncluster.3i1sjcv.mongodb.net/
			click “databases”
			there will be the 2 default db “admin” and “local”, and my “supportdeskdb”
			click it, there will be my “users” collection

////////////////////////////////////////////////////////////////////////////////////////////////////////

-create my “support-desk” project on my computer
	/Users/yiliu/Desktop/Symphysis Marketing Solutions/review2022/support-desk
	open in VScode
	-create a folder “backend”
		-create backend entry point “server.js”
  -in “support-desk” directory create the package.json by
    -in terminal
    /Users/yiliu/Desktop/Symphysis Marketing Solutions/review2022/support-desk
    npm init
      entry point change from index.js to server.js
      lecense MIT 
  -change the run script in "package.json"
    change "test" script to
    "start": "node backend/server.js"
  -to run the server.js 
    -in terminal
    /Users/yiliu/Desktop/Symphysis Marketing Solutions/review2022/support-desk
    npm start

-install some packages 
  web framework, envirnment variable, ODM for mongodb, terminal color, hash password
    npm i express dotenv mongoose colors bcryptjs

-install dev dependency
  nodemon to keep on watching the server without restart
    npm i -D nodemon
  in "package.json"
  add script
    "server": "nodemon backend/server.js"
  -to run the server without restart for every changes
    npm run server

////////////////////////////////////////////////////////////////////////////////////////////////

-create github repo
  -in github create repo name "support-desk"
  -in terminal
  git init
  touch .gitignore
    -in .gitignore
      node_modules
      .env  
  git add .
  git commit -m 'init commit'
  git remote add origin https://github.com/fruit13ok/support-desk.git
  git branch -M main
  git push -u origin main

////////////////////////////////////////////////////////////////////////////////////////////////

-basic Express server ***
  in server.js
  bring in Express, make .env file use epxress to listen to prot 
  create a GET request route

-add routes and controller
  -break routes in multiple file
    create uesrRoutes.js in /backend/routes/uesrRoutes.js
      use router = express.Router()
      instead of app.post("/",), do router.post("/",)
      export the router
    in server.js
      now can name a route and point to uesrRoutes.js by 
        app.use("/api/users", require("./routes/userRoutes"));
    so we can access path like http://localhost:5000/api/users
    we can sub route like http://localhost:5000/api/users/login by
      add more route and append a longer path name
        router.post("/login",)
 -use controller for manage what each route do by create functions
  create userController.js in /backend/controllers/userController.js
    create function to handle each request
  in userRoutes.js access userController.js
    in router's callback function call userController.js function
  
-error and exception handling ***
  we will create "middleware" to OVERRIDE existing "throw new Error()"
  handle the "body" data that send to registerUser and loginUser routes
  we need express json and urlencoded (this used to be part of bodyparser, now included in express)
    in server.js
      app.use(express.json());
      app.use(express.urlencoded({ extended: false }));
  in userController.js, registerUser()
    console.log(req.body);
  in postman 
    http://localhost:5000/api/users
    POST, Body, urlencoded, key name: Yi, email: yi@gmail.com, password: 123
      now terminal will log that body json object 
  to handle error we can use if condition to send back response 
    but we want the system to identify it as error
      throw new Error alone will display a regular HTML error and other junk message
        now "throw new Error()" will display HTML error message
        so we want to create a middleware to handle errors, to get a json object
        this errorMiddleware.js will OVERRIDE existing "throw new Error()"
        create errorMiddleware.js in /backend/middleware/errorMiddleware.js
          const errorHandler = (err, req, res, next) => {...}
        in server.js, import errorMiddleware and use errorHandler
          const { errorHandler } = require("./middleware/errorMiddleware");
          app.use(errorHandler);
        now "throw new Error()" will display JSON object error message, with stacktrace line number of the bug
  to handle promise like response from database, we will use async/await handler 
    install express-async-handler 
    https://github.com/Abazhenov/express-async-handler
    npm install --save express-async-handler
    in userController.js, require it
      const asyncHandler = require('express-async-handler')
      change from 
      const registerUser = (req, res) => {...}
      to
      const registerUser = asyncHandler(async (req, res) => {...});

-connect to database
  -in database account, 
    connect, connect your application, copy the connection string,
    mongodb+srv://fruit13ok:<password>@reviewmerncluster.3i1sjcv.mongodb.net/?retryWrites=true&w=majority
  -in code, .env file paste string change password to database password "ly13OK", and insert db name "supportdeskdb"
    MONGO_URI = mongodb+srv://fruit13ok:ly13OK@reviewmerncluster.3i1sjcv.mongodb.net/supportdeskdb?retryWrites=true&w=majority
    -create database connection file in 
      /backend/config/db.js
    -in server.js, bring in colors
      const colors = require("colors");
    -in db.js, bring in mongoose
      const mongoose = require("mongoose");
      try to connect
        const conn = await mongoose.connect(process.env.MONGO_URI);
      catch error and exit 
      export
    -in server.js, bring in db.js connection function
      run the db connectiojn function

-register user
  -create model file by writing its schema
    /backend/models/userModels.js
    schema: what a user model looks like, Schema upper case
      const mongoose = require("mongoose");
      const userSchema = mongoose.Schema({name: {...},email: {...},password: {...},isAdmin: {...},},{timestamps: true,});
  -export model, code differently, "User" is upper case, so bring it in as upper case
    module.exports = mongoose.model("User", userSchema);
  -in userController.js, 
    bring in bcrypt to hash the password to put it in database, and bring in user model
    -in registerUser() function
      -"Find" if user already exists us findOne()
        const userExists = await User.findOne({email});
      -Hash password
        use bcrypt to generate "salt" and hash password
      -create user
        use our user model to create user
          const user = await User.create({name: name,email: email,password: hashedPassword,});
        after user successfully created into db, show the response back data
  -in postman, create a new user to database
    POST
    http://localhost:5000/api/users/
    name, email, password
    result display back
      {"_id": "639786f90225e1ce8bd5b721","name": "Yi","email": "yi@gmail.com"}

-login and create JWT
  -in userController.js, 
    -in loginUser() function
      find login info from db, if found user, then check password
        use bcrypt "compare()" to compare input password and the db hashed password
  -in postman, login user
    POST
    http://localhost:5000/api/users/
    body, urlencoded
    email: yi@gmail.com, password: wrong
    then try  
    email: yi@gmail.com, password: 123
  -when crate new user or login we want to send back a "json web token", later on will store JWT in frontend
    we need to install package "jsonwebtoken"
      npm i jsonwebtoken
    -in userController.js, bring in jsonwebtoken
      create generateToken() function
        use "jwt.sign()" with "id" passing in, and "JWT_SECRET" in .env file, and assign expiration "expiresIn"
      in .env add JWT_SECRET
      we also want to response back a JWT
      in both registerUser() and loginUser() res.
        token: generateToken(user._id)
  -in MongoDB Compass, delete the user
    -in postman register again
      this time will also response with token, copy the token 
    -go to jwt.io 
      paste in the token to see the payload
    -same goes for login user

-Protect routes and authentication
  we use the JWT token to access the non-public routes
  -first create a new route
    in userController.js, add the getMe() function, and export it
    in userRoutes.js, bring in getMe() function from userController.js,
      add /api/users/me route
  -second protect new route with middleware
    -create file authMiddleware.js,
    -in authMiddleware.js, bring in: 
      jsonwebtoken, express-async-handler, our userModels
      create a "protect" function to protect route
        get the token out from header authorization bearer token
        decode it with JWT_SECRET
        find the user by decoded user id
        use next() funcion to continue to next middleware
      export the protect function
    -in userRoutes.js,
      bring in protect() from authMiddleware.js
        const { protect } = require("../middleware/authMiddleware");
      to protect a route add "protect" as the second argument
        router.get("/me", protect, getMe);
    -in postman,
      go to http://localhost:5000/api/users/me
      GET
      Authentication
        no Auth 
        this should get 401 unauthorized error
      go to http://localhost:5000/api/users/login
      POST
      email, password
      send and copy the toekn
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzOTdiZDA3NTY0ZjQ2NjliNDk4ZWYyNSIsImlhdCI6MTY3MDg5NTcxMiwiZXhwIjoxNjczNDg3NzEyfQ.TspuRwFgcSLs_SuGhDLLUlJxTqyQkFsPhsIHfCsmhKA
      go back to http://localhost:5000/api/users/me
      GET
      Authentication
        Bearer token
        paste the token here 
      send will be 200 OK 
    -in userController.js,
      edit getMe() to send back better user data
-now the backend is ready to put together with the frontend

///////////////////////////////////////////////////////////////////////////////////////////////////

-frontend folder setup
  -use create-react-app to create the frontend folder includes the redux boilderplate 
    in root directory,
      npx create-react-app frontend --template redux
      (if there is error try "create-react-app@latest")
      check and remove .git folder in frontend directory, we already have .git folder in root 
        cd frontend
        ls -a
        rm -rf .git
      try to run frontend
        npm start
      -we want to be able to run frontend from root
        in root's package.json, edit "scripts",
          "client": "npm start --prefix frontend"
          cd ..
          npm run client
      -we want to run both server and client at once use "concurrently"
        npm i concurrently
        in root's package.json, edit "scripts",
          "dev": "concurrently \"npm run server\" \"npm run client\""
      try to run both frontend and backend 
        npm run dev 
  -install frontend dependencies, in the frontend folder
    -while keep frontend and backend running, open up another terminal, and go to frontend folder,
      npm i react-router-dom react-toastify axios react-icons react-modal
        (ignore High severity vulnerability)
  -clean up the unwanted files that installed
    in frontend/src/ remove some file
      remove logo.svg, App.css, App.test.js, setupTests.js,
    in App.js remove some code
      remove logo, css, counter, import react, remove header inside App()
      keep the App() function and enter our text, we left
        function App() {
          return <div>My App</div>;
        }
        export default App;
    in index.css remove all style
      copy the lecture style from github 

-header and initial pages
  use:
    Router, Routes, Route, Link from react-router-dom
    FaSignInAlt, FaSignOutAlt, FaUser from react-icons/fa
  -create "pages" folder, and 3 pages 
    frontend/src/pages 
    Home.jsx, Login.jsx, Register.jsx 
    -in Home.jsx 
      generate code with
        rfce tab
      copy those code
    -in Login.jsx
      paste those code and change the function name
    -in Register.jsx
      paste those code and change the function name
  -in App.js, 
    we already installed "react-router-dom"
    create 3 routes
    return fragment <></> wraps <Router> wraps <Routes> wraps <Route> 
      <Route path="/" element={<Home />} />
    try the route http://localhost:3000/login
  -in src, carate folder "components"
    frontend/src/components
  -in components, create Header.jsx component
    this header link back to Home
  -in App.js, add Header component above Routes
  -in Header.jsx, under the div add list of Links

-Home, Login, Register UI 
  create register form, use useState to set form data state, use toast / ToastContainer to toast error message
  -in Register.jsx, create a form, use useState to set form data state, use toast to set what to toast
  -in App.js, use ToastContainer to set where/how to display the toast 
  -in Login.jsx, copy all code from Register.jsx,
    change the naming to Login, change icon to FaSignInAlt, change formData to just email and password, 
    change onSubmit don't need to match password and password2, delete div form-group name and password2,
  -in Home.jsx, use Link, for now link to 2 pages haven't yet build new-ticket and tickets

-Redux setup & auth slice


